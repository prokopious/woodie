<!DOCTYPE html>
<html lang="en">

<head>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
  <meta charset="utf-8" />
  <title>Fresh or Rotten</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <meta name="description" content="Detect Rotten or Fresh Orange in Browser" />


</head>
<body>
    <main role="main" class="container mt-5">
      <div class="row">
        <div class="col-12">
          <div class="progress progress-bar progress-bar-striped progress-bar-animated mb-2">
            Loading Model
          </div>
        </div>
      </div>
      <div class="row">
        <div class="col-6">
          <input id="image-selector" class="form-control border-0" type="file" />
        </div>
        <div class="col-6">
          <button id="predictBtn" class="btn btn-primary float-right">
            Predict
          </button>
        </div>
      </div>
      <hr />
      <div class="row">
        <div class="col-6">
          <h2 class="ml-3">Image</h2>
          <img id="selected-image" class="ml-3" width="250" alt="" />
        </div>
        
        <div class="col-6">
          <h2 class="ml-3">Predictions</h2>
          <ol id="list"></ol>
        </div>
      </div>
    </main>


  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"></script>

  <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@2.0.0/dist/tf.min.js"></script>
  <script>

const Result = {
	0: "pileated",
	1: "red-bellied"
};
$("#image-selector").change(function () {
	let reader = new FileReader();
	reader.onload = function () {
		let dataURL = reader.result;
		$("#selected-image").attr("src", dataURL);
		$("#prediction-list").empty();
	}

	let file = $("#image-selector").prop('files')[0];
	reader.readAsDataURL(file);
});

let model;
$(document).ready(async function () {
	$('.progress-bar').show();
	model = await tf.loadGraphModel('model/model.json');
	$('.progress-bar').hide();
});

$("#predictBtn").click(async function () {
	let image = $('#selected-image').get(0);
	
	let pre_image = tf.browser.fromPixels(image, 3)
		.resizeNearestNeighbor([224, 224])
		.expandDims()
		.toFloat()
		.reverse(-1); 
	let predict_result = await model.predict(pre_image).data();
	console.log(predict_result);
	let order = Array.from(predict_result)
		.map(function (p, i) { 
			return {
				probability: p,
				className: Result[i] 
			};
		}).sort(function (a, b) {
			return b.probability - a.probability;
		}).slice(0, 2);

	$("#list").empty();
	order.forEach(function (p) {
		$("#list").append(`<li>${p.className}: ${parseInt(Math.trunc(p.probability * 100))} %</li>`);
	});
});

  </script>
</body>

</html>
